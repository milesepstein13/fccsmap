#!/usr/bin/env python3

"""fccsmap: Returns fuelbed information by geographical location or region.

See the README for examples.
"""

__author__      = "Joel Dubowy"

import json
import logging
import sys
import traceback

from pyairfire import scripting
from functools import reduce

try:
    from fccsmap.lookup import FccsLookUp
except:
    import os
    root_dir = os.path.abspath(os.path.join(sys.path[0], '../'))
    sys.path.insert(0, root_dir)
    from fccsmap.lookup import FccsLookUp


OPTIONAL_ARGS = [
    {
        'short': '-l',
        'long': '--lat-lng',
        'help': "comma-separated lat/lng (scalar or range) pair; "
            "ex. '48.2,-120', '45:46,-121.5:-120.5'"
    },
    {
        'short': '-i',
        'long': '--indices',
        'help': "comma-separated grid indices (scalar or range); "
            "ex. '10,3', '10:15,0:5'"
    },
    {
        'short': '-g',
        'long': '--geo-data',
        'help': 'json-formated geometry vector data; '
            'ex. \'{"type": "MultiPolygon","coordinates": [[[[-121.5212, 48.3082],[-121.5215, 48.3069],[-121.5211, 48.3095],[-121.5212, 48.3082]]],[[[-121.5042, 48.3242],[-121.5045, 48.3228],[-121.5041, 48.3255],[-121.5042, 48.3242]]]]}\''
    },
    # Options to specify alternate data file
    {
        'short': '-f',
        'long': '--fccs-fuelload-file',
        'help': "NetCDF file containing FCCS lookup map",
        'metavar': "FILE"
    },
    {
        'short': '-p',
        'long': '--fccs-fuelload-param',
        'help': "Name of variable in NetCDF file",
        'metavar': "FILE"
    },
    {
        'short': '-a',
        'long': '--is-alaska',
        'help': "Use Alaska-specific NetCDF file (only if '-f' isn't specified)",
        'action': "store_true",
        'default': False
    },
    {
        'short': '-v',
        'long': '--fccs-version',
        'help': "Version of FCCS NetCDF file",
        'default': '2'
    }
]

USAGE = "usage: %prog [options] <id> [<id> ...]"

EPILOG_STR = """\

Example calls:

    $ fccsmap --log-level=DEBUG -l 48.0,-121.0 |python -m json.tool
    $ fccsmap --log-level=DEBUG -g '{
        "type": "MultiPolygon",
        "coordinates": [
            [[
                [-120.9, 48.1],
                [-120.9, 47.9],
                [-121.1, 47.9],
                [-121.1, 48.1]
            ]],
            [[
                [-121.3, 48.3],
                [-121.5, 48.3],
                [-121.5, 48.5],
                [-121.3, 48.5]
            ]]
        ]
    }' | python -m json.tool
    $ fccsmap --log-level=DEBUG -g '{
      "type": "MultiPoint",
      "coordinates": [
        [-121.4522115, 47.4316976],
        [-120.0, 48.0]
      ]
    }'
"""

def main():
    parser, args = scripting.args.parse_args([], OPTIONAL_ARGS,
        epilog=EPILOG_STR)

    if 1 != sum([int(not not e) for e in
            [args.lat_lng, args.indices, args.geo_data]]):
        scripting.utils.exit_with_msg(
            "Specify either '-l'/'--lat-lng', '-i'/'--indices', "
            "or '-g'/'--geo-data'",
            extra_output=lambda: parser.print_help())

    try:
        lookup = FccsLookUp(fccs_fuelload_file=args.fccs_fuelload_file,
            fccs_fuelload_param=args.fccs_fuelload_file,
            is_alaska=args.is_alaska, fccs_version=args.fccs_version)
        if args.lat_lng:
            lats_lngs = [e.split(':') for e in args.lat_lng.split(',')]
            if (2 != len(lats_lngs) or len(lats_lngs[0]) != len(lats_lngs[1]) or
                    len(lats_lngs[0]) not in [1, 2]):
                scripting.utils.exit_with_msg("Invalid lat/lng: %s" % (args.lat_lng))
            args = [float(e) for e in reduce(lambda a, b: a + b, lats_lngs, [])]
            if len(lats_lngs[0]) == 2:
                data = lookup.look_up_by_lat_lng_range(*args)
            else:
                data = lookup.look_up_by_lat_lng(*args)

        elif args.indices:
            raise NotImplementedError("Looking up fuelbeds by grid indices not supported")
        else:
            data = lookup.look_up(json.loads(args.geo_data))
        sys.stdout.write(json.dumps(data))

    except Exception as e:
        if logging.getLogger().getEffectiveLevel() <= logging.DEBUG:
            scripting.utils.exit_with_msg(traceback.format_exc(), prefix="")
        else:
            scripting.utils.exit_with_msg(e.message)

if __name__ == "__main__":
    main()
