#!/usr/bin/env python

"""fccsmap: Returns fuelbed information by geographical location or region.

Ex. To see fuelbeds around Snoqualmie pass
 $ ./bin/fccsmap --log-level=DEBUG -g '{
      "type": "MultiPolygon",
      "coordinates": [
        [
          [
            [-121.4522115, 47.4316976],
            [-121.3990506, 47.4316976],
            [-121.3990506, 47.4099293],
            [-121.4522115, 47.4099293],
            [-121.4522115, 47.4316976]
          ]
        ]
      ]
    }'

Ex. To see fuelbeds in WA state
 $ ./bin/fccsmap --log-level=DEBUG -g '{
      "type": "MultiPolygon",
      "coordinates": [
          [
              [
                  [-125.0, 49.0],
                  [-117.0, 49.0],
                  [-117.0, 45.0],
                  [-125.0, 45.0],
                  [-125.0, 49.0]
              ]
          ]
      ]
    }'

Ex. To see fuelbeds under to polygon regions
 $ ./bin/fccsmap --log-level=DEBUG -g '{
      "type": "MultiPolygon",
      "coordinates": [
        [
          [
            [-121.4522115, 47.4316976],
            [-121.3990506, 47.4316976],
            [-121.3990506, 47.4099293],
            [-121.4522115, 47.4099293],
            [-121.4522115, 47.4316976]
          ]
        ],
        [
          [
            [-120.4522115, 47.4316976],
            [-120.3990506, 47.4316976],
            [-120.3990506, 47.4099293],
            [-120.4522115, 47.4099293],
            [-120.4522115, 47.4316976]
          ]
        ]
      ]
    }'

Ex. To see fuelbeds at one point
 $ ...
"""

__author__      = "Joel Dubowy"
__copyright__   = "Copyright 2014, AirFire, PNW, USFS"

import json
import logging
import sys
import traceback
from optparse import OptionParser

from pyairfire import scripting as scripting

from fccsmap.lookup import FccsLookUp

OPTIONAL_OPTIONS = [
    {
        'short': '-l',
        'long': '--lat-lng',
        'help': "comma-separated lat/lng (scalar or range) pair; "
            "ex. '47.2,-120', '45:46,-121.5:-120.5'"
    },
    {
        'short': '-i',
        'long': '--indices',
        'help': "comma-separated grid indices (scalar or range); "
            "ex. '10,3', '10:15,0:5'"
    },
    {
        'short': '-g',
        'long': '--geo-data',
        'help': 'json-formated geometry vector data; '
            'ex. \'{"type": "MultiPolygon","coordinates": [[[[-84.5212, 32.3082],[-84.5215, 32.3069],[-84.5211, 32.3095],[-84.5212, 32.3082]]],[[[-84.5042, 32.3242],[-84.5045, 32.3228],[-84.5041, 32.3255],[-84.5042, 32.3242]]]]}\''
    },
    # Options to specify alternate data file
    {
        'short': '-f',
        'long': '--fccs-fuelload-file',
        'help': "NetCDF file containing FCCS lookup map",
        'metavar': "FILE"
    },
    {
        'short': '-a',
        'long': '--is-alaska',
        'help': "Use Alaska-specific NetCDF file (only if '-f' isn't specified)",
        'action': "store_true",
        'default': False
    },
    {
        'short': '-v',
        'long': '--fccs-version',
        'help': "Version of FCCS NetCDF file",
        'default': '2'
    }
]

USAGE = "usage: %prog [options] <id> [<id> ...]"

def main():
    parser, options, args = scripting.options.parse_options([],
        OPTIONAL_OPTIONS, usage=USAGE)

    if 1 != sum([int(not not e) for e in
            [options.lat_lng, options.indices,options.geo_data]]):
        scripting.utils.exit_with_msg(
            "Specify either '-l'/'--lat-lng', '-i'/'--indices', "
            "or '-v'/'--multi-polgon-vector-data'",
            extra_output=lambda: parser.print_help())

    try:
        lookup = FccsLookUp(fccs_fuelload_file=options.fccs_fuelload_file,
            is_alaska=options.is_alaska)
        if options.lat_lng:
            data = {}
        elif options.indices:
            data = {}
        else:
            data = lookup.look_up(json.loads(options.geo_data))
        sys.stdout.write(json.dumps(data))

    except Exception, e:
        if logging.getLogger().getEffectiveLevel() <= logging.DEBUG:
            scripting.utils.exit_with_msg(traceback.format_exc(), prefix="")
        else:
            scripting.utils.exit_with_msg(e.message)

if __name__ == "__main__":
    main()
