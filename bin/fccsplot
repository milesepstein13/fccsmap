#!/usr/bin/env python3

"""fccsmap: Generates plot of fccs data.
"""

__author__      = "Joel Dubowy"

import json
import logging
import os
import subprocess
import sys
import traceback
import tempfile

import matplotlib.pyplot as plt
import numpy as np
from afscripting import args as scripting_args
from functools import reduce
#from netCDF4 import Dataset
from osgeo import gdal
from shapely import ops, geometry

try:
    from fccsmap import lookup
except:
    import os
    root_dir = os.path.abspath(os.path.join(sys.path[0], '../'))
    sys.path.insert(0, root_dir)
    from fccsmap import lookup


OPTIONAL_ARGS = [
    {
        'short': '-g',
        'long': '--geo-data',
        'help': 'json-formated geometry vector data; '
            'ex. \'{"type": "Polygon","coordinates": [[[-121.5212, 48.3082],[-121.5215, 48.3069],[-121.5211, 48.3095],[-121.5212, 48.3082]]]}\''
    },
    {
        'short': '-f',
        'long': '--geo-data-file',
        'help': 'json-formated geometry vector data in a separate file'
    },
    {
        'short': '-n',
        'long': '--neighborhood-dimensions-factor',
        'help': 'expand (or reduce) dimensions of plotted area by this factor',
        'type': int

    }
]

# Note: scripting_args.parse_args adds logging and configuration related options


USAGE = "usage: %prog [options] <id> [<id> ...]"

EPILOG_STR = """

Valid Options:

{options_str}

Example calls:

  Single point near Snoqualmie pass

    $ {script_name} --log-level=DEBUG -g '{{
          "type": "Point",
          "coordinates": [-121.4522115, 47.4316976]
        }}'

  Single point in Lake Chelan

    $ {script_name} --log-level=DEBUG -g '{{
          "type": "Point",
          "coordinates": [-120.3606708, 48.0364064]
        }}'

  Area around Snoqualmie pass

    $ {script_name} --log-level=DEBUG -g '{{
          "type": "Polygon",
          "coordinates": [
            [
              [-121.4522115, 47.4316976],
              [-121.3990506, 47.4316976],
              [-121.3990506, 47.4099293],
              [-121.4522115, 47.4099293],
              [-121.4522115, 47.4316976]
            ]
          ]
        }}'

 """.format(options_str=lookup.FccsLookUp.OPTIONS_STRING,
    script_name=sys.argv[0])

# class data_set(object):

#     def __init__(self, file_name):
#         self.file_name = file_name

#     def __enter__(self):
#         self.ds = Dataset(self.file_name, mode='r')
#         return self.ds

#     def __exit__(self, e_type, value, tb):
#         self.ds.close()


def convert_point_to_polygon(fccs_lookup, geo_data):
    if geo_data["type"] in ('Point', 'MultiPoint'):
        geo_data = fccs_lookup._transform_points(geo_data, 0.5) #fccs_lookup.grid_resolution)
    return geo_data

def expand(min_val, max_val, neighborhood_dimensions_factor):
    center = (max_val + min_val) / 2
    delta_from_center = ((max_val-min_val) / 2) * neighborhood_dimensions_factor
    max_val = center + delta_from_center
    min_val = center - delta_from_center
    return min_val, max_val

def plot(geo_data, fccs_lookup, neighborhood_dimensions_factor):
    s = geometry.shape(geo_data)
    s = ops.transform(fccs_lookup.projector, s)

    with tempfile.TemporaryDirectory() as tmpdirname:
        # using gdal_translate to extract data. e.g.
        #  gdal_translate -projwin -1921306.7467230938 2984866.5269676857 -1896597.2850769295 2960331.6517833835 -of GTiff fccs2_fuelload.nc reduced.tif
        #  gdal_translate -projwin -1921306.7467230938 2984866.5269676857 -1896597.2850769295 2960331.6517833835 -of NetCDF fccs2_fuelload.nc reduced.nc
        max_x = max(s.bounds[0],s.bounds[2])
        min_x = min(s.bounds[0],s.bounds[2])
        max_y = max(s.bounds[1],s.bounds[3])
        min_y = min(s.bounds[1],s.bounds[3])
        logging.info(f"x,y bounds (before any expansion): {min_x}, {max_x}  {min_y},{max_y}")

        if neighborhood_dimensions_factor and neighborhood_dimensions_factor != 1:
            min_x, max_x = expand(min_x, max_x, neighborhood_dimensions_factor)
            min_y, max_y = expand(min_y, max_y, neighborhood_dimensions_factor)
        logging.info(f"New x,y ranges: {min_x}, {max_x}  {min_y},{max_y}")

        reduced_file = os.path.join(tmpdirname, 'reduced.tff')
        translate_cmd = ["gdal_translate", "-projwin",
            str(min_x), str(max_y), str(max_x), str(min_y),
            "-of", "GTiff", fccs_lookup.filename, reduced_file]
        subprocess.run(translate_cmd)
        reduced_dataset = gdal.Open(reduced_file)
        data = reduced_dataset.GetRasterBand(1).ReadAsArray()
        fig, ax = plt.subplots()
        ax.matshow(data, cmap='ocean')
        for (i, j), z in np.ndenumerate(data):
            ax.text(j, i, '{}'.format(z), ha='center', va='center')

        # TODO:  somehoy plot polygon in geo_data over fccs grid

        plt.show()


def main():
    parser, args = scripting_args.parse_args([], OPTIONAL_ARGS,
        epilog=EPILOG_STR)

    if 1 != sum([int(not not e) for e in
            [args.geo_data, args.geo_data_file]]):
        scripting_args.exit_with_msg(
            "Specify either '-g'/'--geo-data' or '-f'/'--geo-data-file'",
            extra_output=lambda: parser.print_help())

    try:
        fccs_lookup = lookup.FccsLookUp(**(args.config_options or {}))

        if args.geo_data_file:
            with open(args.geo_data_file) as f:
                geo_data = f.read()
        else:
            geo_data = args.geo_data
        geo_data = json.loads(geo_data)
        geo_data = convert_point_to_polygon(fccs_lookup, geo_data)

        plot(geo_data, fccs_lookup, args.neighborhood_dimensions_factor)

    except Exception as e:
        if logging.getLogger().getEffectiveLevel() <= logging.DEBUG:
            scripting_args.exit_with_msg(traceback.format_exc(), prefix="")
        else:
            scripting_args.exit_with_msg(e)

if __name__ == "__main__":
    main()
